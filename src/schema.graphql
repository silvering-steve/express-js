scalar Date

enum TransactionType {
    IN
    OUT
}

type Wallet {
    _id: ID!
    balance: Int
}

type User {
    _id: ID!
    address: String
    birthdate: Date
    created_at: Date
    name: String!
    phone: String!
    wallet: Wallet!
}

input CreateUserData {
    name: String!
    address: String!
    phone: String!
    birthdate: String!
}

type Transaction {
    _id: ID!
    wallet: Wallet!
    amount: Int!
    type: TransactionType!
    created_at: Date!
    description: String
}

type Query {
    healthCheck: String!

    getUsers: [User!]!
    getUser(userId: ID!): User

    getTransactionsByWallet(walletId: ID!, description: String, greaterThan:
    Int): [Transaction]!
}

type Mutation {
    createUser(createUserData: CreateUserData!): User!
    updateWallet(id: ID!, amount: Int!, type: TransactionType!): Wallet!
}
